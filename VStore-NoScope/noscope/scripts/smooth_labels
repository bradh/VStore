#!/usr/bin/env python

from __future__ import division
import numpy as np
import os
import sys

DIRNAME = os.path.dirname(os.path.realpath(__file__))
PRESENT = 1
NOT_PRESENT = 0

def parse_csv_file(filename):
    frame_objects = []
    with open(filename, 'r') as f:
        f.readline() # skip first line (header)
        for line in f:
            frame_objects.append( eval(line.split(',', 1)[1].replace('"', '')) )

    return frame_objects

def label_indicator(frame_objects, label):
    for frame_object in frame_objects:
        if label in frame_object.values():
            return PRESENT

    return NOT_PRESENT
    
def smooth_indicator_array(indicator_array, window_size, window_thres):
    """
    Smooths a numpy indicator array with a window centered on each point. Points
    near the edges are padded with zeros.
    """

    assert( isinstance(indicator_array, type(np.array(1, dtype=int))) )
    rolling_sum = np.cumsum(indicator_array, dtype=int)
    rolling_sum[window_size:] = rolling_sum[window_size:] - rolling_sum[:-window_size]
    
    assert(window_size % 2 == 1)
    shift = int((window_size-1) / 2)
    rolling_sum = np.append(rolling_sum, np.zeros((shift,), dtype=int))
    rolling_sum = rolling_sum[shift:]

    # overlapping windows
    smoothed_indicator = map(lambda x: int(x >= window_thres), rolling_sum)

    # non-overlaping window
    smoothed_indicator = map(lambda x: int(x >= window_thres), rolling_sum[0::window_size])
    smoothed_indicator = reduce(lambda x,y: x+y, map(lambda x: [x for _ in xrange(window_size)], smoothed_indicator) )
    smoothed_indicator = smoothed_indicator[:len(indicator_array)]

    # print indicator_array
    # print rolling_sum
    # print np.asarray(smoothed_indicator)

    return smoothed_indicator

################################################################################
# begin the script
################################################################################
if __name__ == '__main__':
    if len(sys.argv) != 5:
        sys.stderr.write('Usage:\n\t' + os.path.basename(sys.argv[0]) + 
                         ' LABEL WINDOW_SIZE WINDOW_THRES CSV_FILE\n\n')
        sys.stderr.write('Description:\n\tApplies windowing to smooth labels. Outputs to STDOUT.\n')
        sys.stderr.write('\tNOTE: this only produces smoothed labels for the binary task.\n\n')
        sys.exit(1)

    label = sys.argv[1]
    window_size = int(sys.argv[2])
    window_thres = int(sys.argv[3])
    input_file = sys.argv[4]

    if window_size % 2 != 1:
        sys.stderr.write('\n\tERROR: WINDOW_SIZE must be an ODD number\n\n')
        sys.exit(1)
        
    frames = parse_csv_file(input_file)
    frames_indicator = np.asarray( map(lambda x: label_indicator(x, label), frames) )

    smoothed_indicator_array = smooth_indicator_array(frames_indicator, 
                                                      window_size, 
                                                      window_thres)
    
    frames_smoothed = map(lambda x: '"[]"' if x == 0 
                          else "\"[{'object_name' : '"+label+"'}]\"",
                          smoothed_indicator_array)

    sys.stdout.write('frame,labels\n')
    for i in xrange(len(frames_smoothed)):
        sys.stdout.write(str(i) + ',' + frames_smoothed[i] + '\n')
